-- copied from after/plugin/nvim-cmp.lua, because `capabilities` was flagged unknown by LSP
-- Extends completion features, s. https://github.com/hrsh7th/cmp-nvim-lsp
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)


-- Enable the following language servers
--  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
--
--  Add any additional override configuration in the following tables. They will be passed to
--  the `settings` field of the server config. You must look up that documentation yourself.
--> Check output of :LspInfo (maybe using <Tab> afterwards) for useful information!
--
-- TODO: Different setup schemes for different LSPs <04-07-2024>
-- Due to reasons I don't understand doesn't 'servers' work with the other LSPs
-- And the manual setup, fi with python, doesn't work with lua_ls.
-- local servers = {
--   -- https://luals.github.io/wiki/settings/
--   -- mytable@…: mytable@inse<C-Enter> -> table.insert(mytable, )
--   lua_ls = {
--     Lua = {
--       workspace = { checkThirdParty = false },
--       telemetry = { enable = false },
--       diagnostics = { globals = { 'vim' } }, -- Get the language server to recognize the `vim` global
--       completion = {
--         callSnippets = "Both",               -- "Disable", "Replace"
--         displayContext = 6,
--       },
--       -- hint.enable -> hint = { enable … }
--       hint = {
--         enable = true,
--         arrayIndex = 'Enable',
--         setType = true,
--       },
--     }
--   },
-- }


-- Manual LSP configuration
-- ────────────────────────

-- local lspconfig = require 'lspconfig'

-- ─── Python ──────────
-- Example from https://www.reddit.com/r/neovim/comments/1bt3dy0/comment/l5813wf/?context=3
--
-- lspconfig.pylsp.setup {
--   on_attach = on_attach,
--   capabilities = capabilities,
--   settings = {
--     pylsp = {
--       -- :PyLspInstall <tab>
--       plugins = {
--         -- Unklar, was es macht, wird ggfl. auch von ruff[-lsp] übernommen
--         rope = {
--           enabled = false,
--         },
--         -- All disabled to avoid overlap with ruff
--         -- list from python-lsp-ruff
--         pycodestyle = {
--           enabled = false,
--           maxLineLength = 150
--         },
--         mccabe = {
--           enabled = false,
--         },
--         pydocstyle = {
--           enabled = false,
--         },
--         -- autopep8, yapf formatieren beide, Unterschied unklar. yapf = false, autopep8 = true macht es so, wie ich es möchte
--         yapf = {
--           enabled = false,
--         },
--         autopep8 = {
--           enabled = false,
--         },
--       }
--     }
--   }
-- }
--
-- -- Configure `ruff-lsp`.
-- -- See: https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#ruff_lsp
-- -- For the default config, along with instructions on how to customize the settings
-- -- Currently, I am using ~/.config/ruff/ruff.toml to control ruff-lsp
-- lspconfig.ruff.setup {
--   init_options = {
--     settings = {
--       -- Any extra CLI arguments for `ruff` go here.
--       args = {},
--     }
--   }
-- }
--
--
-- -- ─── CMAKE ──────────
-- lspconfig.cmake.setup {
--   on_attach = on_attach,
--   capabilities = capabilities,
-- }
--
-- -- ─── C++ ──────────
-- lspconfig.clangd.setup {
--   on_attach = on_attach,
--   capabilities = capabilities,
--   -- doesn't work :(
--   -- cmd = {
--   --   '/localhome/rost_ph/.local/share/nvim/mason/bin/clangd',
--   --   --   '--background-index',
--   --   --   '--compile-commands-dir=/localhome/rost_ph/proj/upas-l2/UPAS-L2/src',
--   --   '--log=verbose', -- /localhome/rost_ph/.local/state/nvim/lsp.log
--   -- }
--   --   "--fallback-style='{IndentWidth: 4, ColumnLimit: 70}'",
--   -- cmd = { "clangd", "--background-index" }
-- }
